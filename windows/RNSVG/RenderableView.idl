namespace RNSVG
{
  enum UnitType
  {
    Unknown,
    Number,
    Percentage,
    EMS,
    EXS,
    PX,
    CM,
    MM,
    PT,
    PC,
  };

  [default_interface]
  runtimeclass SVGLength {
    SVGLength();
    SVGLength(Single param);
    SVGLength(Single param, UnitType type);

    Single Value { get; };
    UnitType Unit { get; };
  }

  enum BaseProp
  {
    Matrix,
    Fill,
    FillOpacity,
    FillRule,
    Stroke,
    StrokeOpacity,
    StrokeWidth,
    StrokeMiterLimit,
    StrokeDashOffset,
    StrokeDashArray,
    StrokeLineCap,
    StrokeLineJoin,
    Unknown,
  };

  enum FontProp
  {
    FontSize,
    FontWeight,
    FontFamily,
    Unknown,
  };

  [default_interface]
  unsealed runtimeclass RenderableView : Windows.UI.Xaml.FrameworkElement
  {
    RenderableView(Microsoft.ReactNative.IReactContext context);
    Windows.UI.Xaml.FrameworkElement SvgParent;
    Microsoft.Graphics.Canvas.Geometry.CanvasGeometry Geometry;

    Windows.Foundation.Numerics.Matrix3x2 SvgTransform;
    Windows.UI.Color Fill;
    Single FillOpacity;
    Windows.UI.Color Stroke;
    Single StrokeOpacity;
    SVGLength StrokeWidth;
    Single StrokeMiterLimit;
    Single StrokeDashOffset;
    Windows.Foundation.Collections.IVector<SVGLength> StrokeDashArray{ get; };
    Microsoft.Graphics.Canvas.Geometry.CanvasCapStyle StrokeLineCap;
    Microsoft.Graphics.Canvas.Geometry.CanvasLineJoin StrokeLineJoin;
    Microsoft.Graphics.Canvas.Geometry.CanvasFilledRegionDetermination FillRule;

    void UpdateProperties(Microsoft.ReactNative.IJSValueReader reader, Boolean forceUpdate, Boolean invalidate);
    void InvalidateCanvas();

    void CreateGeometry(Microsoft.Graphics.Canvas.ICanvasResourceCreator resourceCreator);
    void Render(
      Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl canvas,
      Microsoft.Graphics.Canvas.CanvasDrawingSession session);
  }

  [default_interface]
  runtimeclass RectView : RenderableView
  {
    RectView();
  }

  [default_interface]
  runtimeclass PathView : RenderableView
  {
    PathView();
  }

  [default_interface]
  unsealed runtimeclass GroupView : RenderableView
  {
    GroupView(Microsoft.ReactNative.IReactContext context);
    Windows.Foundation.Collections.IVector<RenderableView> Children { get; };

    Single FontSize;
    String FontFamily;
    String FontWeight;

    void AddChild(RenderableView child);

    void RenderGroup(
        Microsoft.Graphics.Canvas.UI.Xaml.CanvasControl canvas,
        Microsoft.Graphics.Canvas.CanvasDrawingSession session);
  };

  [default_interface]
  unsealed runtimeclass TextView : GroupView
  {
    TextView();
    Windows.Foundation.Collections.IVector<SVGLength> X{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> Y{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> DX{ get; };
    Windows.Foundation.Collections.IVector<SVGLength> DY{ get; };
  }

  [default_interface]
  runtimeclass TSpanView : TextView
  {
    TSpanView();
  }
  }
